{"version":3,"sources":["../src/index.ts","../src/ExitHook.ts"],"sourcesContent":["import ExitHook, { ExitHookOptions } from \"./ExitHook\";\n\nexport function exitHook(cronExpression: string, options: ExitHookOptions = {}): ExitHook {\n    return new ExitHook(cronExpression, options);\n}\n\nexport { ExitHook, ExitHookOptions };\n","import { schedule, ScheduledTask } from \"node-cron\";\n\nexport default class ExitHook {\n    readonly options: Readonly<ParsedExitHookOptions>;\n    private _active: boolean;\n    private job: Nullable<ScheduledTask>;\n    private jobComplete: boolean;\n    private restartTimeout: Nullable<NodeJS.Timeout>;\n    private maxTimeout: Nullable<NodeJS.Timeout>;\n\n    constructor(readonly cronExpression: string, options: ExitHookOptions) {\n        this.options = ExitHook.parseOptions(options);\n        this._active = this.options.active;\n        this.job = schedule(\n            this.cronExpression,\n            this.task.bind(this),\n            { scheduled: this.options.active }\n        );\n        this.jobComplete = false;\n        this.restartTimeout = null;\n        this.maxTimeout = null;\n        if (this.options.active) {\n            this.logVerbose(`Exit scheduled with pattern \"${this.cronExpression}\"`);\n        }\n    }\n\n    get active(): boolean {\n        return this._active;\n    }\n\n    get destroyed(): boolean {\n        return !!this.job;\n    }\n\n    private static parseOptions(options: ExitHookOptions): Readonly<ParsedExitHookOptions> {\n        return Object.freeze({\n            ...options,\n            verbose: options.verbose ?? false,\n            restartDelay: options.restartDelay ?? 0,\n            active: options.active ?? true,\n            exitCode: options.exitCode ?? 0,\n            errorExitCode: options.errorExitCode ?? 1\n        });\n    }\n\n    private logVerbose(...messages: Array<any>): void {\n        if (this.options.verbose) {\n            console.debug(\"[exit-hook]\", ...messages);\n        }\n    }\n\n    private clearRestartTimeout(): void {\n        if (this.restartTimeout) {\n            clearTimeout(this.restartTimeout);\n            this.restartTimeout = null;\n        }\n    }\n\n    private clearTimeouts(): void {\n        this.clearRestartTimeout();\n        if (this.maxTimeout) {\n            clearTimeout(this.maxTimeout);\n            this.maxTimeout = null;\n        }\n    }\n\n    private async exit(): Promise<void> {\n        let exitCode: number = this.options.exitCode;\n        try {\n            this.clearTimeouts();\n            this.logVerbose(\"Exit triggered\");\n            if (this.options.beforeExit) {\n                this.logVerbose(\"Executing before-exit hook\");\n                await this.options.beforeExit();\n            }\n        }\n        catch (err: any) {\n            console.error(err);\n            exitCode = this.options.errorExitCode;\n        }\n        finally {\n            this.logVerbose(`Exiting with code ${exitCode}`);\n            process.exit(exitCode);\n        }\n    }\n\n    private async task(): Promise<void> {\n        this.jobComplete = true;\n        this.job!.stop();\n        this.logVerbose(\"Cron job completed\");\n        if (this._active) {\n            await this.exit();\n        }\n        else if (this.options.maxDelay) {\n            this.logVerbose(`Max delay set. Exiting in ${this.options.maxDelay} ms`);\n            this.maxTimeout = setTimeout(this.exit.bind(this), this.options.maxDelay);\n        }\n    }\n\n    destroy(): void {\n        if (this.job) {\n            this.job.stop();\n            this.clearTimeouts();\n            this.job = null;\n            this._active = false;\n            this.logVerbose(\"Hook destroyed\");\n        }\n    }\n\n    start(): void {\n        if (this.job && !this._active) {\n            this.logVerbose(\"Starting hook\");\n            if (this.jobComplete) {\n                this.logVerbose(`Hook started after cron job completed. Exiting in ${this.options.restartDelay} ms`);\n                this.restartTimeout = setTimeout(this.exit.bind(this), this.options.restartDelay);\n            }\n            else {\n                this.job.start();\n                this.logVerbose(`Exit scheduled with pattern \"${this.cronExpression}\"`);\n            }\n            this._active = true;\n        }\n    }\n\n    stop(): void {\n        if (this.job && this._active) {\n            this.logVerbose(\"Stopping hook\");\n            this.clearRestartTimeout();\n            this._active = false;\n        }\n    }\n}\n\ntype Nullable<T> = T | null;\ntype Awaitable<T> = T | Promise<T>;\ntype BeforeExitHook = () => Awaitable<void>;\ntype ParsedExitHookOptions = {\n    verbose: boolean;\n    restartDelay: number;\n    maxDelay?: number;\n    active: boolean;\n    beforeExit?: BeforeExitHook;\n    exitCode: number;\n    errorExitCode: number;\n};\nexport type ExitHookOptions = {\n    [key in keyof ParsedExitHookOptions]?: ParsedExitHookOptions[key]\n};\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,cAAAE,EAAA,aAAAC,IAAA,eAAAC,EAAAJ,GCAA,IAAAK,EAAwC,qBAEnBC,EAArB,MAAqBC,CAAS,CAQ1B,YAAqBC,EAAwBC,EAA0B,CAAlD,oBAAAD,EACjB,KAAK,QAAUD,EAAS,aAAaE,CAAO,EAC5C,KAAK,QAAU,KAAK,QAAQ,OAC5B,KAAK,OAAM,YACP,KAAK,eACL,KAAK,KAAK,KAAK,IAAI,EACnB,CAAE,UAAW,KAAK,QAAQ,MAAO,CACrC,EACA,KAAK,YAAc,GACnB,KAAK,eAAiB,KACtB,KAAK,WAAa,KACd,KAAK,QAAQ,QACb,KAAK,WAAW,gCAAgC,KAAK,cAAc,GAAG,CAE9E,CAEA,IAAI,QAAkB,CAClB,OAAO,KAAK,OAChB,CAEA,IAAI,WAAqB,CACrB,MAAO,CAAC,CAAC,KAAK,GAClB,CAEA,OAAe,aAAaA,EAA2D,CACnF,OAAO,OAAO,OAAO,CACjB,GAAGA,EACH,QAASA,EAAQ,SAAW,GAC5B,aAAcA,EAAQ,cAAgB,EACtC,OAAQA,EAAQ,QAAU,GAC1B,SAAUA,EAAQ,UAAY,EAC9B,cAAeA,EAAQ,eAAiB,CAC5C,CAAC,CACL,CAEQ,cAAcC,EAA4B,CAC1C,KAAK,QAAQ,SACb,QAAQ,MAAM,cAAe,GAAGA,CAAQ,CAEhD,CAEQ,qBAA4B,CAC5B,KAAK,iBACL,aAAa,KAAK,cAAc,EAChC,KAAK,eAAiB,KAE9B,CAEQ,eAAsB,CAC1B,KAAK,oBAAoB,EACrB,KAAK,aACL,aAAa,KAAK,UAAU,EAC5B,KAAK,WAAa,KAE1B,CAEA,MAAc,MAAsB,CAChC,IAAIC,EAAmB,KAAK,QAAQ,SACpC,GAAI,CACA,KAAK,cAAc,EACnB,KAAK,WAAW,gBAAgB,EAC5B,KAAK,QAAQ,aACb,KAAK,WAAW,4BAA4B,EAC5C,MAAM,KAAK,QAAQ,WAAW,EAEtC,OACOC,EAAU,CACb,QAAQ,MAAMA,CAAG,EACjBD,EAAW,KAAK,QAAQ,aAC5B,QACA,CACI,KAAK,WAAW,qBAAqBA,CAAQ,EAAE,EAC/C,QAAQ,KAAKA,CAAQ,CACzB,CACJ,CAEA,MAAc,MAAsB,CAChC,KAAK,YAAc,GACnB,KAAK,IAAK,KAAK,EACf,KAAK,WAAW,oBAAoB,EAChC,KAAK,QACL,MAAM,KAAK,KAAK,EAEX,KAAK,QAAQ,WAClB,KAAK,WAAW,6BAA6B,KAAK,QAAQ,QAAQ,KAAK,EACvE,KAAK,WAAa,WAAW,KAAK,KAAK,KAAK,IAAI,EAAG,KAAK,QAAQ,QAAQ,EAEhF,CAEA,SAAgB,CACR,KAAK,MACL,KAAK,IAAI,KAAK,EACd,KAAK,cAAc,EACnB,KAAK,IAAM,KACX,KAAK,QAAU,GACf,KAAK,WAAW,gBAAgB,EAExC,CAEA,OAAc,CACN,KAAK,KAAO,CAAC,KAAK,UAClB,KAAK,WAAW,eAAe,EAC3B,KAAK,aACL,KAAK,WAAW,qDAAqD,KAAK,QAAQ,YAAY,KAAK,EACnG,KAAK,eAAiB,WAAW,KAAK,KAAK,KAAK,IAAI,EAAG,KAAK,QAAQ,YAAY,IAGhF,KAAK,IAAI,MAAM,EACf,KAAK,WAAW,gCAAgC,KAAK,cAAc,GAAG,GAE1E,KAAK,QAAU,GAEvB,CAEA,MAAa,CACL,KAAK,KAAO,KAAK,UACjB,KAAK,WAAW,eAAe,EAC/B,KAAK,oBAAoB,EACzB,KAAK,QAAU,GAEvB,CACJ,EDjIO,SAASE,EAASC,EAAwBC,EAA2B,CAAC,EAAa,CACtF,OAAO,IAAIC,EAASF,EAAgBC,CAAO,CAC/C","names":["src_exports","__export","ExitHook","exitHook","__toCommonJS","import_node_cron","ExitHook","_ExitHook","cronExpression","options","messages","exitCode","err","exitHook","cronExpression","options","ExitHook"]}